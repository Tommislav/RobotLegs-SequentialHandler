SequentialHandler is supposed to a very easy way to chain asynchronous tasks in a very simple and readable way.
It is suppose to work well together with robotlegs (version 1, it is currently running under Robotlegs version 1.5).
The code is released under MIT license.

Usage:
1. Create a new se.salomonsson.sequence.SequenceHandler instance
2. Create your own Asyncronous tasks by extending se.salomonsson.sequence.SequentialTask
2a. override exeStart() to fire up your async actions.
2b. when task is completed, call onCompleted(). Call onError(msg,id) in case of fatal error (SequenceHandler will report error and won't continue with the rest of the tasks).
2c. override exeCleanUp() to remove all dependencies. This is called automatically after complete, error or abort.
2d. (optional) If your task has conditional logic for if it wants to start: override wantsToStart() and return Boolean.
3. Call sequenceHandler.start()

If you pass an instance of IInjector (Robotlegs) to the SequenceHandler, then [Inject] tags of each SequentialTask will be injected before wantsToStart() and exeStart() is called.

If you are using Robotlegs you can use the se.salomonsson.sequence.robotlegs.SequenceCommand which will automatically
call commandMap.detain() and commandMap.release(), and also listens for ContextEvent.SHUTDOWN and aborts the current sequence.



Changelog: 
v 0.7
For some stupid reason the eventdispatcher introduced in v0.6 was only settable from a method with the internal
namespace, wich made it impossible to test a single task that was dispatching events. If everything in this
framework is unittested, then anything built with it should be testable as well.... Don't know what I was thinking.

v 0.6
First added an EventBus (commonly used in robotlegs) so we can dispatch, addListener, removeListener and 
removeAllListeners from tasks in the same way as it does in Commands and Mediators. Auto-cleans up all listeners
internally after exeComplete has been called. Not the most elegant solution, but all unittests run, so maybe a 
refactoring round up next.

Also added a IDebugOutputAdapter so we can log debug messages to other targets than just simple trace() when F1 is
pressed.

CompositeTasks now has a method called "abortChildTasksAndProceed()" which will call abort on all composite tasks, but
not treat the compositeTask as if it was actually completed, so that the rest of the task sequence can proceed as usual.

v 0.5
Bugfix if the first sub-task in a parallelTask calls abort, then the parallelTask should not proceed to the next task, 
and definetly not try to kill it since it hasn't started yet.

v 0.4
added a addPreCondition(boolMethod:Function) to base task, so we can set up common preconditions for several tasks when
defining our task sequence

v 0.3
added compositeTask, a task that contains a sequenceHandler. Use with caution, becaues they tend to be nasty to debug =)